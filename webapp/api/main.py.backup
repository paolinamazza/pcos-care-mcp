"""
PCOS Care Web API - FastAPI Backend

REST API per webapp che condivide lo stesso backend del MCP server.
Usa gli stessi database/ e rag/ modules.
"""

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import BaseModel, EmailStr
from typing import Optional, List
import sys
from pathlib import Path
from datetime import timedelta

# Add parent directory to path per importare moduli esistenti
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from database import DatabaseManager
from database.auth import User
from tools import SymptomTracker, CycleTracker, PatternAnalyzer
from rag import PCOSKnowledgeBase

# Import auth utilities
from auth import (
    authenticate_user,
    create_user,
    create_access_token,
    get_current_user,
    get_current_active_user,
    update_last_login,
    ACCESS_TOKEN_EXPIRE_MINUTES
)

# Initialize FastAPI app
app = FastAPI(
    title="PCOS Care API",
    description="REST API per tracking sintomi, cicli e Q&A PCOS",
    version="2.0.0"
)

# CORS - permetti richieste dal frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173"],  # React/Vite dev servers
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize shared components (stessi del MCP server)
db_manager = DatabaseManager()
symptom_tracker = SymptomTracker(db_manager)
cycle_tracker = CycleTracker(db_manager)
pattern_analyzer = PatternAnalyzer(db_manager)

# Initialize RAG (con try/except per fallback)
try:
    knowledge_base = PCOSKnowledgeBase(use_pdf_rag=True)
    RAG_AVAILABLE = True
except Exception as e:
    knowledge_base = None
    RAG_AVAILABLE = False
    print(f"Warning: RAG system not available: {e}")


# ============================================================================
# Pydantic Models per Request/Response
# ============================================================================

class SymptomCreate(BaseModel):
    symptom_type: str
    intensity: int
    notes: Optional[str] = ""

class CycleCreate(BaseModel):
    start_date: str
    end_date: Optional[str] = None
    flow_intensity: str = "medium"
    notes: Optional[str] = ""

class CycleUpdate(BaseModel):
    end_date: str

class KnowledgeQuery(BaseModel):
    question: str
    num_sources: int = 3
    category_filter: Optional[str] = None

# Authentication Models
class UserRegister(BaseModel):
    email: EmailStr
    username: str
    password: str
    full_name: Optional[str] = None

class UserLogin(BaseModel):
    username: str
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str

class UserResponse(BaseModel):
    id: int
    email: str
    username: str
    full_name: Optional[str]
    is_active: bool
    has_anthropic_key: bool
    has_openai_key: bool

class UserAPIKeysUpdate(BaseModel):
    anthropic_api_key: Optional[str] = None
    openai_api_key: Optional[str] = None

# Chatbot Models
class ChatMessage(BaseModel):
    role: str  # "user" or "assistant"
    content: str

class ChatRequest(BaseModel):
    message: str
    conversation_history: List[ChatMessage] = []
    use_rag: bool = True
    category_filter: Optional[str] = None


# ============================================================================
# Health Check
# ============================================================================

@app.get("/")
async def root():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "app": "PCOS Care API",
        "version": "2.0.0",
        "rag_available": RAG_AVAILABLE
    }

@app.get("/health")
async def health_check():
    """Detailed health check"""
    # Check database
    db_healthy = True
    try:
        db_manager.get_session()
    except Exception:
        db_healthy = False

    # Check RAG
    rag_stats = None
    if RAG_AVAILABLE and knowledge_base:
        try:
            rag_stats = knowledge_base.get_stats()
        except Exception:
            pass

    return {
        "status": "healthy" if db_healthy else "degraded",
        "database": "connected" if db_healthy else "error",
        "rag": {
            "available": RAG_AVAILABLE,
            "stats": rag_stats
        }
    }


# ============================================================================
# Symptom Routes
# ============================================================================

@app.post("/api/symptoms")
async def create_symptom(symptom: SymptomCreate):
    """Registra un nuovo sintomo"""
    result = symptom_tracker.track_symptom(
        symptom_type=symptom.symptom_type,
        intensity=symptom.intensity,
        notes=symptom.notes
    )

    if not result["success"]:
        raise HTTPException(status_code=400, detail=result["message"])

    return result

@app.get("/api/symptoms")
async def get_symptoms(limit: int = 10):
    """Recupera ultimi sintomi"""
    result = symptom_tracker.get_recent_symptoms(limit=limit)

    if not result["success"]:
        raise HTTPException(status_code=500, detail=result["message"])

    return result

@app.get("/api/symptoms/summary")
async def get_symptom_summary(days: int = 30):
    """Statistiche sintomi"""
    result = symptom_tracker.get_summary(days=days)

    if not result["success"]:
        raise HTTPException(status_code=500, detail=result["message"])

    return result


# ============================================================================
# Cycle Routes
# ============================================================================

@app.post("/api/cycles")
async def create_cycle(cycle: CycleCreate):
    """Registra un nuovo ciclo"""
    result = cycle_tracker.track_cycle(
        start_date=cycle.start_date,
        end_date=cycle.end_date,
        flow_intensity=cycle.flow_intensity,
        notes=cycle.notes
    )

    if not result["success"]:
        raise HTTPException(status_code=400, detail=result["message"])

    return result

@app.patch("/api/cycles/{cycle_id}")
async def update_cycle(cycle_id: int, cycle: CycleUpdate):
    """Aggiorna data fine ciclo"""
    result = cycle_tracker.update_cycle_end(
        cycle_id=cycle_id,
        end_date=cycle.end_date
    )

    if not result["success"]:
        raise HTTPException(status_code=404, detail=result["message"])

    return result

@app.get("/api/cycles")
async def get_cycles(limit: int = 6):
    """Recupera storico cicli"""
    result = cycle_tracker.get_cycle_history(limit=limit)

    if not result["success"]:
        raise HTTPException(status_code=500, detail=result["message"])

    return result

@app.get("/api/cycles/analytics")
async def get_cycle_analytics(months: int = 6):
    """Analytics cicli mestruali"""
    result = cycle_tracker.get_cycle_analytics(months=months)

    if not result["success"]:
        raise HTTPException(status_code=500, detail=result["message"])

    return result


# ============================================================================
# Analytics Routes
# ============================================================================

@app.get("/api/analytics/correlation")
async def analyze_correlation(months: int = 3):
    """Correlazione sintomi-ciclo"""
    result = pattern_analyzer.analyze_symptom_cycle_correlation(months=months)

    if not result["success"]:
        raise HTTPException(status_code=500, detail=result["message"])

    return result

@app.get("/api/analytics/trends")
async def analyze_trends(symptom_type: Optional[str] = None, days: int = 90):
    """Trend sintomi nel tempo"""
    result = pattern_analyzer.analyze_symptom_trends(
        symptom_type=symptom_type,
        days=days
    )

    if not result["success"]:
        raise HTTPException(status_code=500, detail=result["message"])

    return result

@app.get("/api/analytics/patterns")
async def identify_patterns(min_occurrences: int = 2):
    """Pattern ricorrenti"""
    result = pattern_analyzer.identify_recurring_patterns(
        min_occurrences=min_occurrences
    )

    if not result["success"]:
        raise HTTPException(status_code=500, detail=result["message"])

    return result


# ============================================================================
# Knowledge Base Routes (RAG)
# ============================================================================

@app.post("/api/knowledge/query")
async def query_knowledge(query: KnowledgeQuery):
    """Query sistema RAG per informazioni PCOS"""
    if not RAG_AVAILABLE or knowledge_base is None:
        raise HTTPException(
            status_code=503,
            detail="RAG system not available. Run: python3 scripts/setup_rag.py"
        )

    try:
        # Try PDF RAG first
        result = knowledge_base.query_pdf_knowledge(
            query=query.question,
            top_k=query.num_sources,
            category_filter=query.category_filter,
            include_sources=True
        )

        # Fallback to legacy if needed
        if not result["success"] and result.get("fallback_available"):
            result = knowledge_base.get_answer(
                query=query.question,
                top_k=query.num_sources,
                include_sources=True
            )
            result["system"] = "legacy_faiss"

        if not result["success"]:
            raise HTTPException(status_code=404, detail=result.get("message", "No information found"))

        return result

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error querying knowledge base: {str(e)}")

@app.get("/api/knowledge/stats")
async def get_knowledge_stats():
    """Statistiche knowledge base"""
    if not RAG_AVAILABLE or knowledge_base is None:
        raise HTTPException(
            status_code=503,
            detail="RAG system not available"
        )

    try:
        stats = knowledge_base.get_stats()
        return stats
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# ============================================================================
# Run Server
# ============================================================================

if __name__ == "__main__":
    import uvicorn

    print("=" * 60)
    print("PCOS Care Web API Starting...")
    print("=" * 60)
    print(f"Database: {'Connected' if db_manager else 'Error'}")
    print(f"RAG System: {'Available' if RAG_AVAILABLE else 'Unavailable'}")
    print("=" * 60)
    print("\nServer running at: http://localhost:8000")
    print("API Docs: http://localhost:8000/docs")
    print("=" * 60)

    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
